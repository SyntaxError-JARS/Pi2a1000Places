/*
 * MenuDom Draft.
 * 
 * Copyright 2022 Rodney <>
 * 
 */

/*                                               Example  Default class not used for now.
public class untitled {
	public static void main (String[] args) {
	}
}
*/

package com.revature.Pi2a1000Places.customer;

import com.revature.Pi2a1000Places.util.ConnectionFactory;

import java.sql.Connection;               // These 4 are the require libraries need to perform features inside them.
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class MenuDao {                  // The default required class for code to work.

    public static Menu create(Menu newItem) {           // The typical primary method of the Java code.

        System.out.println("Here is the newItem as it enters our DAO layer: " + newItem);
        // The above, Java knows to invoke the toString() method when printing the object to the terminal

        try (Connection conn = ConnectionFactory.getInstance().getConnection();) {
            String sql = "add additional selection to the menu (item_name, cost, protein, is_substitutable) values (?, ?, ?, ?)";

            PreparedStatement psmenu = conn.prepareStatement(sql);
            psmenu.setString(1, newItem.getItem_name());
            psmenu.setString(2, newItem.getCost());
            psmenu.setString(3, newItem.getProtein());
            psmenu.setString(4, newItem.getIs_substitutable());

/* the rest of lables must be changed to process the menu table values*/

            int checkInsert = ps.executeUpdate();

            if (checkInsert == 0) {
                throw new RuntimeException();
            }

        } catch (SQLException | RuntimeException e) {
            e.printStackTrace();
            return null;
        }
        return newUser;
    }


    public Boolean pullUsernames(String username) {
        try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
            String sql = "select username from customer where username = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, username);

            ResultSet rs = ps.executeQuery();

            if (!rs.isBeforeFirst()) {
                return false;
            }
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }


    public Customer authenticateCustomer(String username, String password) {

        try (Connection conn = ConnectionFactory.getInstance().getConnection()) {
            String sql = "select * from customer where username = ? and password = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, username);
            ps.setString(2, password);

            ResultSet rs = ps.executeQuery();

            if (!rs.next()) {
                return null;
            }

            Customer customer = new Customer();

            customer.setUsername(rs.getString("username"));
            customer.setFname(rs.getString("fname"));
            customer.setLname(rs.getString("lname"));
            customer.setPassword(rs.getString("password"));

            return customer;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }
}